splice():
----
    -it is used to add or remove elements from an Array
    -it returns an array
    -it changes the original array
syntax:
array.splice(start,deletecount,element1,element2,element3.......elementN)
start: it is used to specify the starting index
deletecount: it is used to specify the no of elements to be removed
element1,element2,elementN:
        it is used to specify the no of elements to be added
-----------------------------------------------------------------------------
 some():
 -----
    -it is used to check if any of the elements of an array satisfy a specific condition
    -it returns a boolean value
    -it introduced in es6
syntax:

array.some((element,index,array)=>{
    //condition
       return element;
})


------------------------------------------------------------
 findIndex():
 -----

    -The findIndex() method returns the index of the 
    -first element in the array that satisfies the provided testing function. If no values satisfy the testing function,
    -1 is returned.
syntax:
array.findIndex(callback(element[, index[, array]])[, thisArg])
---------------------------------------------------------------------------
reverse():
-----
    -reverse the elements in an array
    -it return the same array in a modified way
    -it returns the reference to the same array, now modified.
---------------------------------------------------------------------------     
toString():
------
    
      * The toString() method returns a string representing the
        specified array and its elements.
   * The toString() method does not change the original array.
  * returns string with comma separated values.
-----------------------------------------------------------------
join() method
 * The join() method creates and returns a new string by
 *     concatenating all of the elements in an array (or an array-like object),
 *     separated by commas or a specified separator string.
 *  * The join() method does not change the original array.
 *  * The join() method returns a string
 ---------------------------------------------------------------------
 slice() method
 *  -The slice() method returns a shallow copy of a
 *  portion of an array into a new array object selected
 *  from start to end (end not included) where start and
 *  end represent the index of items in that array.
 *  -The original array will not be modified.
 * syntax:
 * array.slice(start, end)
 *  start: it is used to specify the starting index
 *  end: it is used to specify the ending index(exclusive)
-------------------------------------------------------------------

         forEach()             map()                   filter()
--------------------------------------------------------------------
use:     loop through      loop through              loop through 
        the array          the array                  the array 

purpose  iterates          process/transform the data    filter the data

returns    nothing         returns a new array       returns a new array

modify
original   no                 no                          no
array

-------------------------------------------------------------------
 
 
 
               for..of                     for..in
-------------------------------------------------------------------
loop            yes                         yes

returns         value of each element       key of each element

modify          no                          no

loop over      element/value                 index/keys

useCase:      array/Strings                  objects


---------------------------------------------------------------------
 
 
                  indexOf()            findIndex()         includes()
--------------------------------------------------------------------
matchType          exactMatch          partialMatch        exactMatch

returns            index or -1         index or -1         boolean

work with objects   yes                 no                  yes

---------------------------------------------------------------------


   length()   -- it returns size of an array
   push()     -- it is used to add element at the end
   unShift()  -- it is used to add element at the beginning
   pop()      -- it is used to remove element from the end
   shift()    -- it is used to remove element from the beginning
-----------------------------------------------------------------------
forEach() method
 *    -The forEach() method executes a provided function once
 *    for each array element.
 *    -it works like looping through the array elements.
 *    -The forEach() method does not return a value.
 *syntax:
        arr.forEach(
            (currentValue, index, array) => {
                // code block
            });

-----------------------------------------------------------

for of loop
 *    -The for...of statement creates a loop iterating over
 *    iterable objects, including: typed sets, arrays, strings, etc.
 *  syntax:
 *    for(let element of array){
 * *      //code block
 *    } 
 *  
 --------------------------------------------------------------------------

indexOf() method
 *     -  The indexOf() method returns the first index at
 *         which a given element can be found in the array,
 *         or -1 if it is not present.
 * syntax:
 * array.indexOf(searchElement, fromIndex)
 * searchElement: The value to search for.
 * fromIndex: The index at which to begin the search.(default is 0)(optional)

-------------------------------------------------------------

fill()
 *    - The fill() method changes all elements in an array 
 *      to a static value,and returns the modified array.
 *    - it changes the original array
 *    - it returns the modified array
 * syntax:
 *     array.fill(value, start, end)
 * value: The value to fill the array with.
 * start: The starting index.(default is 0)(optional)
 * end: The ending index.(default is the length of the array)(optional)
       (exclusive) 
--------------------------------------------------------
delete
 *    - The delete operator removes a property from an object/array.
 *    - it deletes the value but not the key/index position
 *    - it returns true if the property is deleted, otherwise false
-------------------------------------------------------------
padStart()
 *     - The padStart() method pads the current string with
 *       another string (multiple times) until it reaches the
 *       specified length.
 *     - it does not change the original string
 *     - it returns the padded string
 *     - it starts padding from left side
 ------------------------------------------------------------------
 * padEnd()
 *     - The padEnd() method pads the current string with
 *       another string (multiple times) until it reaches the
 *       specified length.
 *      - it does not change the original string
 *      - it returns the padded string
 *      - it starts padding from right side
 * syntax:
 *     string.padStart(targetLength, padString)
 * targetLength: The length of the string to pad to.
 * padString: The string to pad the current string with.
 *            (default is ' ')(optional)
 ------------------------------------------------
  trimStart() -it removes the space from the left side
* trimEnd()   -it removes the space from the right side
* trim()      -it removes the space from both sides
------------------------------------------------------------------
sort()
 *    - The sort() method sorts the elements of an array
 *      in place and returns the sorted array.
 *    - it changes the original array
 *    - it returns the sorted array
 * syntax:
 *     array.sort([compareFunction])
 * compareFunction: A function that defines the sort order.
 *                  (optional)
 *                   (default is ascending order)
 ---------------------------------------------------------------
  reduceRight()
 *     - The reduceRight() method applies a function against
 *       an accumulator and each value of the array (from right
 *       to left) to reduce it to a single value.
 *     - it changes the original array
 *     - it returns the reduced value
 * syntax:
 *     array.reduceRight(
 *         (accumulator, currentValue, currentIndex, array) => {
 *             // code block
 *         }
 *     )
 * accumulator: The value accumulated thus far.
 * currentValue: The current element being processed in the array.
 --------------------------------------------------------------
 lastIndexOf()
 *     - The lastIndexOf() method returns the last index
 *       at which a given element can be found in the array,
 *       or -1 if it is not present.
 *     - it returns the index
 *     - it returns -1 if the element is not found
 * syntax:
 *     array.lastIndexOf(searchElement, fromIndex)
 * searchElement: The element to locate in the array.
 * fromIndex: The index at which to start the search.
 ----------------------------------------------------------------
 copyWithin()
 *     - The copyWithin() method shallow copies part of an
 *       array to another location in the same array and
 *       returns it, without modifying its length.
 *     - it changes the original array
 *     - it returns the modified array
 * syntax:
 *     array.copyWithin(target, start, end)
 * target: The index to copy the array to.
 * start: The index to start copying from.
 * end: The index to stop copying (exclusive).
 -----------------------------------------------------
  repeat()
 *     - The repeat() method creates a new string by
 *       repeating the string n times.
 *     - it returns the repeated string
 * syntax:
 *     string.repeat(count)
 * count: The number of times to repeat the string.
 ---------------------------------------------------------
 split()
 *     - The split() method splits a string into an array
 *       of substrings, and returns the new array.
 *     - it returns the new array
 *     - it does not change the original string
 * syntax:
 *     string.split(separator, limit)
 * separator: The separator to use to split the string.
 * limit: The maximum number of substrings to return.
 *        (optional)
 --------------------------------------------------------
 subString()
 *     - The substring() method returns the characters
 *       within a range of indices in a string.
 *     - it returns the substring
 *     - it does not change the original string
 * syntax:
 *     string.substring(start, end)
 * start: The starting index (inclusive).
 * end: The ending index (exclusive).
 -----------------------------------------------------------------
 replace()
 *     - The replace() method returns a new string
 *       with some or all matches of a pattern replaced
 *       by a replacement.
 *     - it returns the new string
 *     - it does not change the original string
 * syntax:  
 *     string.replace(searchValue, replaceValue)
 * searchValue: The value to search for.    
 * replaceValue: The value to replace the search value with.
 *               (optional)
 *               (default is an empty string)

 -----------------------------------------------------------
  nested array-array inside another array
 * flat()
 *    -it is used to flat an nested array
 ---------------------------------------------------
 flatMap()
 *     -it is used to flat an nested array
 *     -it process the data on flat array
 -------------------------------------------